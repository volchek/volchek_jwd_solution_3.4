Текущий проект содержит реализации трех динамических структур данных. 

1. Бинарное дерево поиска
Представляет собой набор узлов, которые реализованы как отдельный класс. Может содержать объекты, реализующие интерфейс Comparable. Дерево не самобалансирующееся. Поддерживается добавление элементов с повторяющимися значениями (такой элемент всегда добавляется в правое поддерево относительно подходящего родительского узла). 
Реализованы следующие методы:
	- создать дерево (пустое или с одним корневым элементом)
	- добавить узел
	- удалить узел
	- найти минимальное значение, содержащееся в дереве
	- найти максимальное значение, содержащееся в дереве
	- проверить, содержится ли в дереве искомое значение
	- обойти дерево одним из трех способов: прямым, симметричным или обратным
Все методы покрыты тестами.

2. Двусвязный список
Наследуется от абстрактного класса MyAbstractList, который реализует стандартный интерфейс List.
Для обхода в классе предусмотрен внутренний класс MyLinkedListIterator implements ListIterator<T>, который реализует большинство стандартных методов из интерфейса ListIterator<T>. 
Возможно создание пустого двусвязного списка или списка, совпадающего с некоторым уже существующим. Дополнительно поддерживаются следующие операции:
	- приведение списка к массиву
	- возвращение значения по индексу узла
	- добавление одного узла или нескольких (в конец списка или в произвольную позицию)
	- удаление узла с указанным индексом
	- удаление узов со значениями, принадлежащими переданной коллекции
	- замену старого значения на новое
	- получить sublist


3. Список на основе массива
Наследуется от абстрактного класса MyAbstractList, который реализует стандартный интерфейс List.
Для обхода в классе предусмотрен внутренний класс MyLinkedListIterator implements ListIterator<T>, который реализует большинство стандартных методов из интерфейса ListIterator<T>. Поддерживается добавление узлов в список, удаление узлов, преобразование списка к массиву и др.


 
